library(rmarkdown)
typeof(4)
typeof(3.141)
typeof("Hello")
.Machine$double.xmin
x <- 2
y <- 6.4
x2 <- x^2
fred <- 2*x+5
wilma <- x+y
a.simple.fraction <- (x+1)/(y+2)
surf <- read.csv("surf.csv", header=TRUE)
setwd("/Users/daffa/Documents/GitHub/DATA202/week2")
surf <- read.csv("surf.csv", header=TRUE)
surf[1:10,]
surf$X <- NULL
names(surf)
#summarising one numerical, one categorical
#say we want to compare income an qualification - we can draw side by side boxplots
#we need to split the income data into separate groups using the Qualification factor
#the functions split() is one way to do this: it takes a vector and divides it into pieces using a factor
splintinc <- split(surt$Income, surf$Qualification)
#summarising one numerical, one categorical
#say we want to compare income an qualification - we can draw side by side boxplots
#we need to split the income data into separate groups using the Qualification factor
#the functions split() is one way to do this: it takes a vector and divides it into pieces using a factor
splintinc <- split(surf$Income, surf$Qualification)
splitinc
#summarising one numerical, one categorical
#say we want to compare income an qualification - we can draw side by side boxplots
#we need to split the income data into separate groups using the Qualification factor
#the functions split() is one way to do this: it takes a vector and divides it into pieces using a factor
splitinc <- split(surf$Income, surf$Qualification)
splitinc
splintinc <- NULL
splitinc
length(splitinc)
#we access each element using double brackets [[]] or by name
splitinc[[4]]
names(splitinc)
splitinc[["school"]]
splitinc$degree
#we can make boxplots of the results
boxplot(splitinc)
#we can make boxplots of the results
boxplot(split(surf$Income, surf$Qualification)
xlab="Qualification", ylab="Weekly Income"
#we can make boxplots of the results
boxplot(split(surf$Income, surf$Qualification),
xlab="Qualification", ylab="Weekly Income")
#we can make boxplots of the results
boxplot(split(surf$Income, surf$Qualification),
xlab="Qualification", ylab="Weekly Income",
main="Distribution of Qualification & Weekly Income")
#R also provides another interface to boxplot() that achieves the same thing:
#treating Income as an outcome variable and Qualification as an explanatory, it represents the splitting of Income by Qualification as an equation:
#Income ~ Qualification with ~ meaning "is explained by"
#we also have to specify where the data comes from with data=
boxplot(Income ~ Qualification, data=surf,
xlab="Qualification", ylab="Weekly Income")
#but again, we run into the problem that levels of Qualification aren't in order. so we have to fix that with factors
surf$Qualification <- factor(surf$Qualification,
levels=c("none", "school", "vocational", "degree"))
boxplot(Income ~ Qualification, data=surf)
#compute mean income by Qualification group
tapply(surf$Income, surf$Qualification, mean)
#compute median income by gender
tapply(surf$Income, surf$Gender, median)
#compute the range of icomes by gender
tapply(surf$Income, surf$Gender, range)
#if we have two categorical variables we can use table() to create a contingency table or corss tabulation - the numbers of observation in each cross classified cell.
#the distribution of qualification and gender is
table(surf$Qualification, surf$Gender)
#we can display the results as a clustered bar chart
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency")
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender, beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0.50),
col=pink.colors(4)))
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender, beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0.50),
col=grey.colors(4)))
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0.50),
col=grey.colors(4))
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0.50),
col=pink.colors(4))
legend("topright", legend=levels(surf$Qualification),
fill=grey.colors(4), ncol=4, bty="n")
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0.50),
col=grey.colors(4))
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0.50),
col=grey.colors(4))
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0,50),
col=grey.colors(4))
legend("topright", legend=levels(surf$Qualification),
fill=grey.colors(4), ncol=4, bty="n")
#a graph like this is uninterpretable without a leged to say what the bars mean.
#we can also choose the colours of the bars ourselves
#we also need to make the y-axis a bit taller to acommodate the legend
barplot(table(surf$Qualification, surf$Gender), beside=TRUE,
xlab="Gender", ylab="Frequency", ylim=c(0,50),
col=grey.colors(4))
legend("topright", legend=levels(surf$Qualification),
fill=grey.colors(4), ncol=4, bty="n")
#read dataset and look at its content
sat <- read.csv("active-satellites.csv")
str(sat)
#find out how many rows and cols it has
dim(sat)
#first few rows
head(sat)
#variable names
names(sat)
#lets look at a numerical value: the orbital period.
#this is the var Period..Minutes.
#clearly measured in minutes
#side note: R has converted spaces in the variable name in the origial data into .
head(sat$Period..Minutes.)
#the values have " surrounding them. this suggests that R is stroing these values as charaters
#we can check this
is.character(sat$Period..Minutes.)
#we want to treat these values as proper numbers so lets force R to view them as numberers
#we can create a new col called PeriodMin in the data frame by getting R to view each value in sat$Period..Minutes. as a number
sat$Period..Minutes. <- as.numeric(sat$Period..Minutes.)
#we get an error saying that NAs are introduced
#let's check which ones
sat$Period..Minutes.[is.na(sat$Period..Minutes.)]
#read dataset and look at its content
sat <- read.csv("active-satellites.csv")
#find out how many rows and cols it has
dim(sat)
#lets look at a numerical value: the orbital period.
#this is the var Period..Minutes.
#clearly measured in minutes
#side note: R has converted spaces in the variable name in the origial data into .
head(sat$Period..Minutes.)
#the values have " surrounding them. this suggests that R is stroing these values as charaters
#we can check this
is.character(sat$Period..Minutes.)
#we want to treat these values as proper numbers so lets force R to view them as numberers
#we can create a new col called PeriodMin in the data frame by getting R to view each value in sat$Period..Minutes. as a number
sat$PeriodMin <- as.numeric(sat$Period..Minutes.)
#we get an error saying that NAs are introduced
#let's check which ones
sat$Period..Minutes.[is.na(sat$Period..Minutes.)]
#we get an error saying that NAs are introduced
#let's check which ones
sat$Period..Minutes.[is.na(sat$PeriodMin)]
#numeber of mins in 8 days is 8*24*69
sat$PeriodMin[sat$Period..Minutes.=="8 days"] <- 8*24*60
#we get an error saying that NAs are introduced
#let's check which ones
sat$Period..Minutes.[is.na(sat$PeriodMin)]
#check again
sat$Period..Minutes.[is.na(sat$PeriodMin)]
#now lets calculate the mean period
mean(sat$PeriodMin)
#we get NA because of the 3 missing values - any calculations involving an NA gives another NA
#we need to exclude those values
mean(sat$PeriodMin[!is.na(sat$PeriodMin)])
#alternatively, ask mean() to remove the NA's for us
mean(sat$PeriodMin, na.rm=TRUE)
barplot(table(sat$Launch.Site))
#now let's take a look at launch sites
head(sat$Launch.Site)
barplot(table(sat$Launch.Site))
#get a table of numbers of launches by site
tablaunch <- table(sat$Launch.Site)
#sort it into increasing order
tablaunch <- sort(tablaunch)
#draw barplot, but rotate the names of the bars, and reduce the font size (cex.names=)
barplot(tablaunch, las=2, cex.names=0.4)
#the biggest five launch sites
tablaunch[length(tablaunch)-5:length(tablaunch)]
#the biggest five launch sites
tablaunch[1:5]
#the biggest five launch sites
rev(tablaunch)[1:5]
